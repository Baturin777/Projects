From 10ee53fc32572d5ea0656b6216a7cf738bf58b5e Mon Sep 17 00:00:00 2001
From: Baturin777 <gam6it@icloud.com>
Date: Sat, 7 Nov 2020 17:50:39 +0300
Subject: [PATCH] lesson1_task1

---
 lesson1_task1.py | 64 ++++++++++++++++++++++++++++++++++++++++++++++++
 lesson1_task2.py | 31 +++++++++++++++++++++++
 lesson1_task3.py | 46 ++++++++++++++++++++++++++++++++++
 lesson1_task7.py | 41 +++++++++++++++++++++++++++++++
 4 files changed, 182 insertions(+)
 create mode 100644 lesson1_task1.py
 create mode 100644 lesson1_task2.py
 create mode 100644 lesson1_task3.py
 create mode 100644 lesson1_task7.py

diff --git a/lesson1_task1.py b/lesson1_task1.py
new file mode 100644
index 0000000..a74e6e3
--- /dev/null
+++ b/lesson1_task1.py
@@ -0,0 +1,64 @@
+# Домашнее задение 1
+
+import random
+
+
+def check_1(lst_obj):
+
+    """Функция должна создать множество из списка.
+
+        Алгоритм 3:
+        Создать множество из списка
+
+        Сложность: O(N).
+        """
+
+    lst_to_set = set(lst_obj)   # O(N)
+    return lst_to_set
+
+
+def check_2(lst_obj):
+    """Функция должная вернуть True, если все элементы списка различаются.
+
+        Алгоритм 1:
+        Проходимся по списку и для каждого элемента проверяем,
+        что такой элемент отстутствует
+        в оставшихся справа элементах
+
+        Сложность: O(n^2)
+        """
+
+    for j in range(len(lst_obj)):            # O(n)
+        if lst_obj[j] in lst_obj[j + 1:]:    # O(n)
+            return False                     # O(1)
+    return True                              # O(1)
+
+def check_3(lst_obj):
+    """Функция должная вернуть True, если все элементы списка различаются.
+
+        Алгоритм 2:
+        Вначале выполним для списка сортировку, далее, сравниваем элементы попарно
+        Если присутствуют дубли, они будут находиться рядом.
+
+        Сложность: O(N log N)
+        """
+
+    lst_copy = list(lst_obj)                 # O(N)
+    lst_copy.sort()                          # O(N log N)
+    for i in range(len(lst_obj) - 1):        # O(N)
+        if lst_copy[i] == lst_copy[i + 1]:   # O(1)
+            return False                     # O(1)
+    return True                              # O(1)
+
+
+for j in (50, 500, 1000, 5000, 10000):
+    lst = random.sample(range(-100000, 100000), j)
+
+print(check_1(lst))
+print(check_2(lst))
+print(check_3(lst))
+
+
+# Домашнее задание 2
+
+
diff --git a/lesson1_task2.py b/lesson1_task2.py
new file mode 100644
index 0000000..7a6fa61
--- /dev/null
+++ b/lesson1_task2.py
@@ -0,0 +1,31 @@
+import random
+
+lst = [random.randint(0, 50) for i in range(10)]
+
+print(lst)
+
+#второй вариант
+
+min_elem = lst[0]
+for i in range(1, len(lst)):
+    if lst[i] < min_elem:
+        min_elem = lst[i]
+print(min_elem)
+
+#первый вариант
+
+min_elem = lst[0]
+for i in lst:
+    for j in lst:
+        if i >= min_elem > j:
+            min_elem = j
+
+print(min_elem)
+
+
+
+
+
+
+
+
diff --git a/lesson1_task3.py b/lesson1_task3.py
new file mode 100644
index 0000000..a3aeaa8
--- /dev/null
+++ b/lesson1_task3.py
@@ -0,0 +1,46 @@
+import copy
+
+data_base_company = {
+    'avtopragmat': 4500,
+    'gardermag': 3200,
+    'akadmig': 2100,
+    'aogranted': 3700,
+    'promavtomash': 1900,
+    'iraero': 2600
+}
+
+
+# первый вариант
+
+
+# list_dict = list(data_base_company.items())
+#
+# list_dict.sort(key=lambda i: i[1])
+
+# print(list_dict[-3:])
+
+
+# Сложность O(NlogN)
+
+
+# второй вариант
+
+
+def max_profit(dict_input):
+
+    input_max_profit = {}
+    new_dict = copy.copy(dict_input)
+    for i in range(3):
+        maximum = max(new_dict.items(), key=lambda k_v: k_v[1])
+        del new_dict[maximum[0]]
+        input_max_profit[maximum[0]] = maximum[1]
+    return input_max_profit
+
+
+print(max_profit(data_base_company))
+
+
+# Сложность O(N)
+
+# Вывод: Второй вариант решения задачи эффективнее, так как имеет сложность линейной функции O(N), в первом же
+# варианте сложность линейно-логорифмической функции O(NlogN)
diff --git a/lesson1_task7.py b/lesson1_task7.py
new file mode 100644
index 0000000..5f79e19
--- /dev/null
+++ b/lesson1_task7.py
@@ -0,0 +1,41 @@
+class DequeClass:
+    def __init__(self):
+        self.elems = []
+
+    def is_empty(self):
+        return self.elems == []
+
+    def add_to_front(self, elem):
+        self.elems.append(elem)
+
+    def add_to_rear(self, elem):
+        self.elems.insert(0, elem)
+
+    def remove_from_front(self):
+        return self.elems.pop()
+
+    def remove_from_rear(self):
+        return self.elems.pop(0)
+
+    def size(self):
+        return len(self.elems)
+
+
+def pal_checker(string):
+    dc_obj = DequeClass()
+
+    for el in string:
+        dc_obj.add_to_rear(el)
+
+    still_equal = True
+
+    while dc_obj.size() > 1 and still_equal:
+        first = dc_obj.remove_from_front()
+        last = dc_obj.remove_from_rear()
+        if first != last:
+            still_equal = False
+
+    return still_equal
+
+
+print(pal_checker("молоко делили ледоколом".replace(' ', '')))
-- 
2.25.1

